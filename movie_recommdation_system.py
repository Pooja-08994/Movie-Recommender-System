# -*- coding: utf-8 -*-
"""Movie Recommdation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oZfu-tr_ra5denzD23QC3H5NsTSs1W3c
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

movies= pd.read_csv('/content/tmdb_5000_movies.csv')
credits= pd.read_csv('/content/tmdb_5000_credits.csv')

movies.head(1)

credits.head(1)['cast'].values

credits.head()

movies.shape

credits.shape

#now we dont want two different df, so we will merge df
movies = movies.merge(credits, on='title') # Remove .shape
movies.head(1) # Now this will work on the DataFrame

movies['original_language'].value_counts()

#what we are going to keep
#genres
#id
#keywords
#title
#overview
#cast
#crew
movies = movies[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]
movies

movies.head()

movies.isnull().sum()

movies.dropna(inplace=True)

movies.isnull().sum() #overview becomes 0

movies.duplicated().sum()

movies.iloc[0].genres

#[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]
# we want to convert this in this format
#['Action','Adventure',........]

def convert(obj):
  L=[]
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L
  #the upper genres is in string so we have to convert it into list

import ast
ast.literal_eval('[{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]')

movies['genres'] = movies['genres'].apply(convert)
movies['genres']

movies.head()

movies.iloc[0].keywords

import ast
ast.literal_eval('[{"id": 1463, "name": "culture clash"}, {"id": 2964, "name": "future"}, {"id": 3386, "name": "space war"}, {"id": 3388, "name": "space colony"}, {"id": 3679, "name": "society"}, {"id": 3801, "name": "space travel"}, {"id": 9685, "name": "futuristic"}, {"id": 9840, "name": "romance"}, {"id": 9882, "name": "space"}, {"id": 9951, "name": "alien"}, {"id": 10148, "name": "tribe"}, {"id": 10158, "name": "alien planet"}, {"id": 10987, "name": "cgi"}, {"id": 11399, "name": "marine"}, {"id": 13065, "name": "soldier"}, {"id": 14643, "name": "battle"}, {"id": 14720, "name": "love affair"}, {"id": 165431, "name": "anti war"}, {"id": 193554, "name": "power relations"}, {"id": 206690, "name": "mind and soul"}, {"id": 209714, "name": "3d"}]')

def convert(obj):
  L=[]
  for i in ast.literal_eval(obj):
    L.append(i['name'])
  return L

movies['keywords'] = movies['keywords'].apply(convert)
movies['keywords']

movies.head()

movies['cast'][0]

def convert(obj):
  L=[]
  counter = 0
  for i in ast.literal_eval(obj):
    if counter != 3:
      L.append(i['name'])
      counter+=1
    else:
      break
  return L

movies['cast'] = movies['cast'].apply(convert)
movies['cast']

movies.head()

movies['crew'][0]

def fetch_director(obj):
  L=[]
  for i in ast.literal_eval(obj):
    if i['job'] == 'Director':
      L.append(i['name'])
      break
  return L

movies['crew'] = movies['crew'].apply(fetch_director)
movies['crew']

movies.head()

movies['overview'][0]

movies['overview'] = movies['overview'].apply(lambda x:x.split())
movies['overview']

movies.head()

movies['genres'] = movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])

movies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])

movies['cast'] = movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])

movies['crew'] = movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head()

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']
movies['tags']

movies.head()

new_df= movies[['movie_id', 'title', 'tags']]
new_df

new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))
new_df['tags']

new_df.head()

new_df['tags'][0]

new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())
new_df['tags']

new_df.head()

import nltk

from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()

def stem(text):
  y=[]

  for i in text.split():
    y.append(ps.stem(i))

  return " ".join(y)

new_df['tags'] = new_df['tags'].apply(stem)
new_df['tags']

new_df['tags'][0]

new_df['tags'][1]

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features=5000, stop_words='english')

vectors = cv.fit_transform(new_df['tags']).toarray()

vectors

vectors[0]

len(cv.get_feature_names_out())

cv.get_feature_names_out()

stem('in the 22nd century, a paraplegic marine is dispatched to the moon pandora on a unique mission, but becomes torn between following orders and protecting an alien civilization. action adventure fantasy sciencefiction cultureclash future spacewar spacecolony society spacetravel futuristic romance space alien tribe alienplanet cgi marine soldier battle loveaffair antiwar powerrelations mindandsoul 3d samworthington zoesaldana sigourneyweaver jamescameron')

from sklearn.metrics.pairwise import cosine_similarity

similarity = cosine_similarity(vectors)

cosine_similarity(vectors).shape

#har movie ka distance har ek movie ke sath nikalna hai mtlb 1 movie ka 4806 ke sath distance ase 2,3 sabka

similarity[0]

similarity[1]

def recommend(movie):
  movie_index= new_df[new_df['title'] == movie].index[0]
  distances = similarity[movie_index]
  movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x:x[1])[1:6]

  for i in movies_list:
    print(new_df.iloc[i[0]].title)
  return

recommend('Avatar')

new_df[new_df['title'] == 'Avatar'].index[0]

new_df[new_df['title'] == 'Avatar']

new_df[new_df['title'] == 'Batman Begins'].index[0]

import pickle

pickle.dump(new_df, open('movies.pkl', 'wb'))

new_df['title'].values

pickle.dump(new_df.to_dict(),open('movie_dict.pkl', 'wb'))

pickle.dump(similarity,open('similarity.pkl','wb'))